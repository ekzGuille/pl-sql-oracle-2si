-- Activar siempre al principio
SET SERVEROUTPUT ON;

-- Ejemplo de PROCEDURE, 
-- solo se le pone parentesis cuando se le pasa un parametro

CREATE PROCEDURE BORRAR_DPTO
IS 
    V_NUM_EMPLEADOS NUMBER(2);
BEGIN
    INSERT INTO DEPART VALUES (99, 'DPTO DE LOLO',NULL);
    UPDATE EMPLE SET DEPT_NO = 99
    WHERE DEPT_NO = 20;
    V_NUM_EMPLEADOS := SQL%ROWCOUNT;

    DELETE FROM DEPART WHERE DEPT_NO = 20;
    DBMS_OUTPUT.PUT_LINE(V_NUM_EMPLEADOS || ' EMPLEADOS UBICADOS EN PROVISIONAL');
    DBMS_OUTPUT.PUT_LINE('DEPT 20 BORRADO CON EXITO');

EXCEPTION
    WHEN OTHERS THEN
        RAISE_APPLICATION_ERROR (-20000, 'ERROR EN LA APLICACIÓN');
END BORRAR_DPTO;
/

-- Para ejecutar 
EXECUTE BORRAR_DPTO();

-- Para borrar
DROP PROCEDURE BORRAR_DPTO();

-- Para ver los errores de compliacion
SHOW ERRORS

-- IMPORTANTE: Los procedimientos almacenados NO devuelven datos
-- -> Hay que guardarlos en variables <-

-- Ejemplo MAL:

CREATE PROCEDURE VER_EMPLE(EMPLEADO NUMBER)
IS
BEGIN
    SELECT APELLIDO
     FROM EMPLE
     WHERE EMPLE.EMP_NO = EMPLEADO;
END VER_EMPLE;
/

-- Ejemplo BIEN:

CREATE PROCEDURE VER_EMPLE(EMPLEADO NUMBER)
IS
    V_APELLIDO VARCHAR2(10);
BEGIN
    SELECT APELLIDO INTO V_APELLIDO
     FROM EMPLE
     WHERE EMPLE.EMP_NO = EMPLEADO;
     DBMS_OUTPUT.PUT_LINE('EL EMPLEADO SE APELLIDA '|| V_APELLIDO);
END VER_EMPLE;
/

-- Si se queja de que el PROCEDURE ya existe, se puede hacer un DROP PROCEDURE o 
-- poner el procedure como CREATE OR REPLACE PROCEDURE.. (aunque este es peligroso porque
-- lo sobrescribe sin avisar)


-- Si por algún casual cambia el tipo de dato que le pasamos en el IS, se puede hacer lo siguiente:

CREATE PROCEDURE VER_EMPLE(EMPLEADO NUMBER)
IS
    V_APELLIDO EMPLE.APELLIDA%TYPE
BEGIN
    SELECT APELLIDO INTO V_APELLIDO
     FROM EMPLE
     WHERE EMPLE.EMP_NO = EMPLEADO;
     DBMS_OUTPUT.PUT_LINE('EL EMPLEADO SE APELLIDA '|| V_APELLIDO);

-- Página 289-290 para EXCEPCIONES
EXCEPTION
    WHEN NO_DATA_FOUND THEN 
        DBMS_OUTPUT.PUT_LINE('NO EXISTE EL EMPLEADO');
    WHEN TOO_MANY_ROWS THEN 
        DBMS_OUTPUT.PUT_LINE('DEMASIADOS VALORES PARA MOSTRAR');
    WHEN OTHERS THEN 
        DBMS_OUTPUT.PUT_LINE('ERROR DESCONOCIDO');
END VER_EMPLE;
/

-- Ejemplo de PROCEDIMIENTO
CREATE OR REPLACE PROCEDURE VER_DEPARTAMENTO (ID_DEPARTAMENTO NUMBER) 
AS
    V_NOMBRE VARCHAR2(14); -- V_NOMBRE DEPART.DNOMBRE%TYPE;
    V_LOCALIDAD VARCHAR2(14); -- V_LOCALIDAD DEPART.LOC%TYPE
BEGIN 
    SELECT DNOMBRE, LOC INTO V_NOMBRE, V_LOCALIDAD
    FROM DEPART
    WHERE DEPT_NO = ID_DEPARTAMENTO;
    DBMS_OUTPUT.PUT_LINE('N.DPTO: '|| ID_DEPARTAMENTO ||' - DPTO:' || V_NOMBRE || ' - LOCALIDAD: '|| V_LOCALIDAD);

EXCEPTION 
    WHEN NO_DATA_FOUND THEN
        DBMS_OUTPUT.PUT_LINE('NO EXISTE EL DEPARTAMENTO');
END VER_DEPARTAMENTO;
/

-- Ejemplo de FUNCION
CREATE OR REPLACE FUNCTION SALUDAR(SEXO CHAR, NOMBRE VARCHAR2) RETURN VARCHAR2
AS
    V_MSJ VARCHAR2(5) DEFAULT 'SR.';
    V_NOMBRE VARCHAR2
BEGIN 
    IF SEXO = 'M' THEN 
        V_MSJ := 'SRA.';
    END IF;
    RETURN V_MSJ;
END SALUDAR;
/

BEGIN 
    DBMS_OUTPUT.PUT_LINE(SALUDAR('M')); 
END;
/

-- Ejemplo de CURSOR con LOOP (NO usar LOOP)
DECLARE
    CURSOR V_CUR IS 
        SELECT APELLIDO, OFICIO
        FROM EMPLE
        WHERE DEPT_NO = 20;
    V_APE EMPLE.APELLIDO%TYPE;
    V_OFI EMPLE.OFICIO%TYPE;
BEGIN
    OPEN V_CUR;
    LOOP 
        FETCH V_CUR INTO V_APE, V_OFI;
        EXIT WHEN V_CUR%NOTFOUND;
        DBMS_OUTPUT.PUT_LINE(V_APE || ' - ' || V_OFI);
    END LOOP;
    CLOSE V_CUR;
END;
/

-- Ejemplo de CURSOR con WHILE (usar WHILE)
-- IMPORTANTE:
    -- Cuando usas el WHILE hay que primero hacer un FECTH para que entre en el bucle
DECLARE
    CURSOR V_CUR IS 
        SELECT APELLIDO, OFICIO
        FROM EMPLE
        WHERE DEPT_NO = 20;
    V_APE EMPLE.APELLIDO%TYPE;
    V_OFI EMPLE.OFICIO%TYPE;
BEGIN
    OPEN V_CUR;
    FETCH V_CUR INTO V_APE, V_OFI;
    WHILE  V_CUR%FOUND LOOP
        DBMS_OUTPUT.PUT_LINE(V_APE || ' - ' || V_OFI);
        FETCH V_CUR INTO V_APE, V_OFI;
    END LOOP;
    CLOSE V_CUR;
END;
/


-- Ejercicio de ejemplo: 

-- Hacer un procedimiento almacenado que reciba un codigo de fabricante  y una categoria 
-- y que nos liste los articulos

-- Utilizar la tabla ARTICULOS
CREATE OR REPLACE PROCEDURE LIST_ARTICULOS(COD_FAB NUMBER, CAT VARCHAR2)
AS
    CURSOR V_LISTA IS 
        SELECT ARTICULO, PESO, PRECIO_VENTA, PRECIO_COSTO, EXISTENCIAS
        FROM ARTICULOS 
        WHERE COD_FABRICANTE = COD_FAB 
            AND CATEGORIA = CAT;

    V_ARTICULO ARTICULOS.ARTICULO%TYPE;
    V_PESO ARTICULOS.PESO%TYPE;
    V_PRECIO_VENTA ARTICULOS.PRECIO_VENTA%TYPE;
    V_PRECIO_COSTO ARTICULOS.PRECIO_COSTO%TYPE;
    V_EXISTENCIAS ARTICULOS.EXISTENCIAS%TYPE;

BEGIN 
    OPEN V_LISTA;
    FETCH V_LISTA INTO V_ARTICULO, V_PESO, V_PRECIO_VENTA, V_PRECIO_COSTO, V_EXISTENCIAS;

    IF V_LISTA%NOTFOUND THEN
        DBMS_OUTPUT.PUT_LINE('NO SE ENCUENTRAN LOS DATOS');
    ELSE 
        WHILE V_LISTA%FOUND LOOP
            DBMS_OUTPUT.PUT_LINE(V_ARTICULO || ' - ' || V_PESO || ' - ' || V_PRECIO_VENTA || ' - ' || V_PRECIO_COSTO || ' - ' || V_EXISTENCIAS);
            FETCH V_LISTA INTO V_ARTICULO, V_PESO, V_PRECIO_VENTA, V_PRECIO_COSTO, V_EXISTENCIAS;
        END LOOP;
    END IF;
    CLOSE V_LISTA;

    EXCEPTION
        WHEN NO_DATA_FOUND THEN
            DBMS_OUTPUT.PUT_LINE('NO SE ENCUENTRAN LOS DATOS');

END LIST_ARTICULOS;
/