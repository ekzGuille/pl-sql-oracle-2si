SET SERVEROUTPUT ON;

CLEAR SCR 
DISCONNECT  
-- Conectarse como SYS y crear otro usuario
CONNECT SYS AS SYSDBA; 

DROP USER GUILLERMO; 

-- Usuario con el que trabajaremos
CREATE USER GUILLERMO IDENTIFIED BY Guillermo; 
GRANT DBA TO GUILLERMO; 
GRANT ALL PRIVILEGES TO GUILLERMO; 

GRANT SELECT, INSERT, UPDATE, DELETE ON BANCOS TO GUILLERMO;
GRANT SELECT, INSERT, UPDATE, DELETE ON SUCURSALES TO GUILLERMO;
GRANT SELECT, INSERT, UPDATE, DELETE ON CUENTAS TO GUILLERMO;
GRANT SELECT, INSERT, UPDATE, DELETE ON MOVIMIENTOS TO GUILLERMO;


REM *** CREACION DE OBJETOS ***

-- OBJETO BANCOS
CREATE OR REPLACE TYPE BANCOS_OBJ AS OBJECT (
  COD_BANCO   NUMBER(4),
  NF_BANCO    VARCHAR2(10),
  NOMBRE_BANC VARCHAR2(30),
  DOM_FISCAL  VARCHAR(35),
  POBLACION   VARCHAR(35),
  MEMBER FUNCTION getCodBanco RETURN NUMBER;
  MEMBER PROCEDURE setCodBanco(_cod_banco NUMBER);
  MEMBER FUNCTION getNfBanco RETURN VARCHAR2;
  MEMBER PROCEDURE setNfBanco(_nf_banco VARCHAR2);
  MEMBER FUNCTION getNombreBanc RETURN VARCHAR2;
  MEMBER PROCEDURE setNombreBanc(_nombre_banc VARCHAR2);
  MEMBER FUNCTION getDomFiscal RETURN VARCHAR;
  MEMBER PROCEDURE setDomFiscal(_dom_fiscal VARCHAR);
  MEMBER FUNCTION getPoblacion RETURN VARCHAR;
  MEMBER PROCEDURE setPoblacion(_poblacion VARCHAR);
  MEMBER PROCEDURE toString;
);

CREATE OR REPLACE TYPE BODY BANCOS_OBJ AS
  MEMBER FUNCTION getCodBanco RETURN NUMBER
    IS
    BEGIN RETURN COD_BANCO;
  END getCodBanco;

  MEMBER PROCEDURE setCodBanco(_cod_banco NUMBER)
  BEGIN
    COD_BANCO := _cod_banco;
  END setCodBanco;

  MEMBER FUNCTION getNfBanco RETURN VARCHAR2
    IS
    BEGIN RETURN NF_BANCO;
  END getNfBanco;

  MEMBER PROCEDURE setNfBanco(_nf_banco VARCHAR2)
  BEGIN
    NF_BANCO := _nf_banco;
  END setNfBanco;

  MEMBER FUNCTION getNombreBanc RETURN VARCHAR2
    IS
    BEGIN RETURN NOMBRE_BANC;
  END getNombreBanc;

  MEMBER PROCEDURE setNombreBanc(_nombre_banc VARCHAR2)
  BEGIN
    NOMBRE_BANC := _nombre_banc;
  END setNombreBanc;

  MEMBER FUNCTION getDomFiscal RETURN VARCHAR
    IS
    BEGIN RETURN DOM_FISCAL;
  END getDomFiscal;

  MEMBER PROCEDURE setDomFiscal(_dom_fiscal VARCHAR)
  BEGIN
    DOM_FISCAL := _dom_fiscal;
  END setDomFiscal;

  MEMBER FUNCTION getPoblacion RETURN VARCHAR
    IS 
    BEGIN RETURN POBLACION;
  END getPoblacion;

  MEMBER PROCEDURE setPoblacion(_poblacion VARCHAR)
  BEGIN
    POBLACION := _poblacion;
  END setPoblacion;
  
  MEMBER PROCEDURE toString
    IS
    BEGIN
      DBMS_OUTPUT.PUT_LINE('COD_BANCO ' || COD_BANCO);
      DBMS_OUTPUT.PUT_LINE('NF_BANCO ' || NF_BANCO);
      DBMS_OUTPUT.PUT_LINE('NOMBRE_BANC ' || NOMBRE_BANC);
      DBMS_OUTPUT.PUT_LINE('DOM_FISCAL ' || DOM_FISCAL);
      DBMS_OUTPUT.PUT_LINE('POBLACION ' || POBLACION);
    END toString;
END;
/

-- OBJETO SUCURSALES
CREATE OR REPLACE TYPE SUCURSALES_OBJ AS OBJECT (
  COD_BANCO   NUMBER(4),
  COD_SUCUR   NUMBER(4),
  NOMBRE_SUC  VARCHAR2(35),
  DIREC_SUC   VARCHAR2(35),
  LOC_SUC     VARCHAR2(20),
  PROV_SUC    VARCHAR2(20),
  MEMBER FUNCTION getCodBanco RETURN NUMBER;
  MEMBER PROCEDURE setCodBanco(_cod_banco NUMBER);
  MEMBER FUNCTION getCodSucur RETURN NUMBER;
  MEMBER PROCEDURE setCodSucur(_cod_sucur NUMBER);
  MEMBER FUNCTION getNombreSuc VARCHAR2;
  MEMBER PROCEDURE setNombreSuc(_nombre_suc VARCHAR2);
  MEMBER FUNCTION getDirecSuc VARCHAR2; 
  MEMBER PROCEDURE setDirecSuc(_direc_suc VARCHAR2);
  MEMBER FUNCTION getLocSuc VARCHAR2;
  MEMBER PROCEDURE setLocSuc(_loc_suc VARCHAR2);
  MEMBER FUNCTION getProvSuc VARCHAR2;
  MEMBER PROCEDURE setProvSuc(_prov_suc VARCHAR2);
  MEMBER PROCEDURE toString;
);

CREATE OR REPLACE TYPE BODY SUCURSALES_OBJ AS
  MEMBER FUNCTION getCodBanco RETURN NUMBER
    IS
    BEGIN RETURN COD_BANCO;
  END getCodBanco;

  MEMBER PROCEDURE setCodBanco(_cod_banco NUMBER)
    BEGIN COD_BANCO := _cod_banco;
  END setCodBanco;

  MEMBER FUNCTION getCodSucur RETURN NUMBER
    IS
    BEGIN RETURN COD_SUCUR;
  END getCodSucur;

  MEMBER PROCEDURE setCodSucur(_cod_sucur NUMBER)
    BEGIN COD_SUCUR := _cod_sucur;
  END setCodSucur;

  MEMBER FUNCTION getNombreSuc VARCHAR2
    IS
    BEGIN RETURN NOMBRE_SUC;
  END getNombreSuc;

  MEMBER PROCEDURE setNombreSuc(_nombre_suc VARCHAR2)
    BEGIN NOMBRE_SUC := _nombre_suc;
  END setNombreSuc;

  MEMBER FUNCTION getDirecSuc VARCHAR2
    IS
    BEGIN RETURN DIREC_SUC;
  END getDirecSuc; 

  MEMBER PROCEDURE setDirecSuc(_direc_suc VARCHAR2)
    BEGIN DIREC_SUC := _direc_suc;
  END setDirecSuc;

  MEMBER FUNCTION getLocSuc VARCHAR2
    IS
    BEGIN RETURN LOC_SUC;
  END getLocSuc;

  MEMBER PROCEDURE setLocSuc(_loc_suc VARCHAR2)
    BEGIN LOC_SUC := _loc_suc;
  END setLocSuc;

  MEMBER FUNCTION getProvSuc VARCHAR2
    IS
    BEGIN RETURN PROV_SUC;
  END getProvSuc;

  MEMBER PROCEDURE setProvSuc(_prov_suc VARCHAR2)
    BEGIN PROV_SUC := _prov_suc;
  END setProvSuc;

  MEMBER PROCEDURE toString
  IS
    BEGIN
      DBMS_OUTPUT.PUT_LINE('COD_BANCO ' || COD_BANCO);
      DBMS_OUTPUT.PUT_LINE('COD_SUCUR ' || COD_SUCUR);
      DBMS_OUTPUT.PUT_LINE('NOMBRE_SUC ' || NOMBRE_SUC);
      DBMS_OUTPUT.PUT_LINE('DIREC_SUC ' || DIREC_SUC);
      DBMS_OUTPUT.PUT_LINE('LOC_SUC ' || LOC_SUC);
      DBMS_OUTPUT.PUT_LINE('PROV_SUC ' || PROV_SUC);
    END toString;
END;
/

-- OBJETO CUENTAS
CREATE OR REPLACE TYPE CUENTAS_OBJ AS OBJECT (
  COD_BANCO   NUMBER(4),
  COD_SUCUR   NUMBER(4),
  NUM_CTA     NUMBER(10),
  FECHA_ALTA  DATE,
  NOMBRE_CTA  VARCHAR2(35),
  DIREC_CTA   VARCHAR2(35),
  POBLA_CTA   VARCHAR2(20),
  SALDO_DEBE  NUMBER(10),
  SALDO_HABER NUMBER(10),
  MEMBER FUNCTION getCodBanco RETURN NUMBER;
  MEMBER PROCEDURE setCodBanco(_cod_banco NUMBER);
  MEMBER FUNCTION getCodSucur RETURN NUMBER;
  MEMBER PROCEDURE setCodSucur(_cod_sucur NUMBER);
  MEMBER FUNCTION getNumCta RETURN NUMBER;
  MEMBER PROCEDURE setNumCta(_num_cta NUMBER);
  MEMBER FUNCTION getFechaAlta RETURN DATE;
  MEMBER PROCEDURE setFechaAlta(_fecha_alta DATE);
  MEMBER FUNCTION getNombreCta RETURN VARCHAR2;
  MEMBER PROCEDURE setNombreCta(_nombre_cta VARCHAR2);
  MEMBER FUNCTION getDirectCta RETURN VARCHAR2;
  MEMBER PROCEDURE setDirectCta(_direct_cta VARCHAR2);
  MEMBER FUNCTION getPoblaCta RETURN VARCHAR2;
  MEMBER PROCEDURE setPoblaCta(_pobla_cta VARCHAR2);
  MEMBER FUNCTION getSaldoDebe RETURN NUMBER;
  MEMBER PROCEDURE setSaldoDebe(_saldo_debe NUMBER);
  MEMBER FUNCTION getSaldoHaber RETURN NUMBER;
  MEMBER PROCEDURE setSaldoHaber(_saldo_haber NUMBER);
  MEMBER PROCEDURE toString;
);

CREATE OR REPLACE TYPE BODY CUENTAS_OBJ AS
  MEMBER FUNCTION getCodBanco RETURN NUMBER
    IS
    BEGIN RETURN COD_BANCO;
  END getCodBanco;

  MEMBER PROCEDURE setCodBanco(_cod_banco NUMBER)
    BEGIN COD_BANCO:= _cod_banco;
  END setCodBanco;

  MEMBER FUNCTION getCodSucur RETURN NUMBER
    IS
    BEGIN RETURN COD_SUCUR;
  END getCodSucur;

  MEMBER PROCEDURE setCodSucur(_cod_sucur NUMBER)
    BEGIN COD_SUCUR:= _cod_sucur;
  END setCodSucur;

  MEMBER FUNCTION getNumCta RETURN NUMBER
    IS
    BEGIN RETURN NUM_CTA;
  END getNumCta;

  MEMBER PROCEDURE setNumCta(_num_cta NUMBER)
  BEGIN NUM_CTA:= _num_cta;
  ENs getNumCta;

  MEMBER FUNCTION getFechaAlta RETURN DATE
    IS
    BEGIN RETURN FECHA_ALTA;
  END getFechaAlta;

  MEMBER PROCEDURE setFechaAlta(_fecha_alta DATE)
    BEGIN FECHA_ALTA:= _fecha_alta;
  END setFechaAlta;

  MEMBER FUNCTION getNombreCta RETURN VARCHAR2
    IS
    BEGIN RETURN NOMBRE_CTA;
  END getNombreCta;

  MEMBER PROCEDURE setNombreCta(_nombre_cta VARCHAR2)
    BEGIN NOMBRE_CTA:= _nombre_cta;
  END setNombreCta;

  MEMBER FUNCTION getDirectCta RETURN VARCHAR2
    IS
    BEGIN RETURN DIREC_CTA;
  END getDirectCta;

  MEMBER PROCEDURE setDirectCta(_direct_cta VARCHAR2)
    BEGIN DIREC_CTA:= _direct_cta;
  END setDirectCta;

  MEMBER FUNCTION getPoblaCta RETURN VARCHAR2
    IS
    BEGIN RETURN POBLA_CTA;
  END getPoblaCta;

  MEMBER PROCEDURE setPoblaCta(_pobla_cta VARCHAR2)
    BEGIN POBLA_CTA:= _pobla_cta;
  END setPoblaCta;

  MEMBER FUNCTION getSaldoDebe RETURN NUMBER
    IS
    BEGIN RETURN SALDO_DEBE;
  END getSaldoDebe;

  MEMBER PROCEDURE setSaldoDebe(_saldo_debe NUMBER)
    BEGIN SALDO_DEBE:= _saldo_debe;
    END setSaldoDebe;

  MEMBER FUNCTION getSaldoHaber RETURN NUMBER
    IS
    BEGIN RETURN SALDO_HABER;
  END getSaldoHaber;

  MEMBER PROCEDURE setSaldoHaber(_saldo_haber NUMBER)
    BEGIN SALDO_HABER:= _saldo_haber;
  END setSaldoHaber;

  MEMBER PROCEDURE toString
  IS
    BEGIN
      DBMS_OUTPUT.PUT_LINE('COD_BANCO ' || COD_BANCO);
      DBMS_OUTPUT.PUT_LINE('COD_SUCUR ' || COD_SUCUR);
      DBMS_OUTPUT.PUT_LINE('NUM_CTA ' || NUM_CTA);
      DBMS_OUTPUT.PUT_LINE('FECHA_ALTA ' || FECHA_ALTA);
      DBMS_OUTPUT.PUT_LINE('NOMBRE_CTA ' || NOMBRE_CTA);
      DBMS_OUTPUT.PUT_LINE('DIREC_CTA ' || DIREC_CTA);
      DBMS_OUTPUT.PUT_LINE('POBLA_CTA ' || POBLA_CTA);
      DBMS_OUTPUT.PUT_LINE('SALDO_DEBE ' || SALDO_DEBE);
      DBMS_OUTPUT.PUT_LINE('SALDO_HABER ' || SALDO_HABER);
    END toString;
END;
/

-- OBJETO MOVIMIENTOS
CREATE OR REPLACE TYPE MOVIMIENTOS_OBJ AS OBJECT (
  COD_BANCO   NUMBER(4),
  COD_SUCUR   NUMBER(4),
  NUM_CTA     NUMBER(10),
  FECHA_MOV   DATE,
  TIPO_MOV    CHAR(1),
  IMPORTE     NUMBER(10),
  MEMBER FUNCTION getCodBanco RETURN NUMBER;
  MEMBER PROCEDURE setCodBanco(_cod_banco NUMBER);
  MEMBER FUNCTION getCodSucur RETURN NUMBER;
  MEMBER PROCEDURE setCodSucur(_cod_sucur NUMBER);
  MEMBER FUNCTION getNumCta RETURN NUMBER;
  MEMBER PROCEDURE setNumCta(_num_cta NUMBER);
  MEMBER FUNCTION getFechaMov RETURN DATE;
  MEMBER PROCEDURE setFechaMov(_fecha_mov DATE);
  MEMBER FUNCTION getTipoMov RETURN CHAR;
  MEMBER PROCEDURE setTipoMov(_tipo_mov CHAR);
  MEMBER FUNCTION getImporte RETURN NUMBER;
  MEMBER PROCEDURE setImporte(_importe NUMBER);
  MEMBER PROCEDURE toString;
);

CREATE OR REPLACE TYPE BODY MOVIMIENTOS_OBJ AS 
  MEMBER FUNCTION getCodBanco RETURN NUMBER
    IS
    BEGIN RETURN COD_BANCO;
  END getCodBanco;

  MEMBER PROCEDURE setCodBanco(_cod_banco NUMBER)
    BEGIN COD_BANCO := _cod_banco;
  END setCodBanco;
  
  MEMBER FUNCTION getCodSucur RETURN NUMBER
    IS
    BEGIN RETURN COD_SUCUR;
  END getCodSucur;

  MEMBER PROCEDURE setCodSucur(_cod_sucur NUMBER)
    BEGIN COD_SUCUR := _cod_sucur;
  END setCodSucur;
  
  MEMBER FUNCTION getNumCta RETURN NUMBER
    IS
    BEGIN RETURN NUM_CTA;
  END getNumCta;

  MEMBER PROCEDURE setNumCta(_num_cta NUMBER)
    BEGIN NUM_CTA := _num_cta;
  END setNumCta;
  
  MEMBER FUNCTION getFechaMov RETURN DATE
    IS
    BEGIN RETURN FECHA_MOV;
  END getFechaMov;

  MEMBER PROCEDURE setFechaMov(_fecha_mov DATE)
    BEGIN FECHA_MOV := _fecha_mov;
  END setFechaMov;
  
  MEMBER FUNCTION getTipoMov RETURN CHAR
    IS
    BEGIN RETURN TIPO_MOV;
  END getTipoMov;

  MEMBER PROCEDURE setTipoMov(_tipo_mov CHAR)
    BEGIN TIPO_MOV := _tipo_mov;
  END setTipoMov;
  
  MEMBER FUNCTION getImporte RETURN NUMBER
    IS
    BEGIN RETURN IMPORTE;
  END getImporte;

  MEMBER PROCEDURE setImporte(_importe NUMBER)
    BEGIN IMPORTE := _importe;
  END setImporte;

  MEMBER PROCEDURE toString
  IS
    BEGIN
      DBMS_OUTPUT.PUT_LINE('COD_BANCO ' || COD_BANCO);
      DBMS_OUTPUT.PUT_LINE('COD_SUCUR ' || COD_SUCUR);
      DBMS_OUTPUT.PUT_LINE('NUM_CTA ' || NUM_CTA);
      DBMS_OUTPUT.PUT_LINE('FECHA_MOV ' || FECHA_MOV);
      DBMS_OUTPUT.PUT_LINE('TIPO_MOV ' || TIPO_MOV);
      DBMS_OUTPUT.PUT_LINE('IMPORTE ' || IMPORTE);
    END toString;
END;
/

REM *** CREACION DE OPERACIONES CUD ***

-- BANCOS_OBJ

CREATE OR REPLACE PROCEDURE INSERT_BANCOS(
  _cod_banco IN BANCOS_OBJ.COD_BANCO%TYPE,
  _nf_banco IN BANCOS_OBJ.NF_BANCO%TYPE,
  _nombre_banc IN BANCOS_OBJ.NOMBRE_BANC%TYPE,
  _dom_fiscal IN BANCOS_OBJ.DOM_FISCAL%TYPE,
  _poblacion IN BANCOS_OBJ.POBLACION%TYPE)
  IS
    e_noInsert EXCEPTION;
  BEGIN 
  INSERT INTO SYS.BANCOS (COD_BANCO, NF_BANCO, NOMBRE_BANC, DOM_FISCAL, POBLACION) 
    VALUES(_cod_banco, _nf_banco, _nombre_banc, _dom_fiscal, _poblacion);

  IF SQL%ROWCOUNT = 0 THEN
    RAISE e_noInsert;
  END IF;
  COMMIT;
  
  EXCEPTION 
    WHEN DUP_VAL_ON_INDEX THEN
      DBMS_OUTPUT.PUT_LINE('NO SE HA INSERTADO EN TABLA BANCOS, INDICE DUPLICADO');
      ROLLBACK;
    WHEN e_noInsert THEN
      DBMS_OUTPUT.PUT_LINE('NO SE HA PODIDO INSERTAR EN TABLA BANCOS');
      ROLLBACK;
    WHEN OTHERS THEN 
      DBMS_OUTPUT.PUT_LINE('ERROR AL INSERTAR EN TABLA BANCOS');
      ROLLBACK;
END INSERT_BANCOS;

CREATE OR REPLACE PROCEDURE UPDATE_BANCOS(
  _cod_banco IN BANCOS_OBJ.COD_BANCO%TYPE,
  _nf_banco IN BANCOS_OBJ.NF_BANCO%TYPE,
  _nombre_banc IN BANCOS_OBJ.NOMBRE_BANC%TYPE,
  _dom_fiscal IN BANCOS_OBJ.DOM_FISCAL%TYPE,
  _poblacion IN BANCOS_OBJ.POBLACION%TYPE)
  IS
    e_noUpdate EXCEPTION;
  BEGIN
    UPDATE SYS.BANCOS 
      SET NF_BANCO = _nf_banco, NOMBRE_BANC = _nombre_banc, DOM_FISCAL = _dom_fiscal, POBLACION = _poblacion
      WHERE COD_BANCO = _cod_banco;
  
  IF SQL%ROWCOUNT = 0 THEN
    RAISE e_noUpdate;
  END IF;
  COMMIT;
  
  EXCEPTION 
    WHEN e_noInsert THEN
      DBMS_OUTPUT.PUT_LINE('NO SE HA PODIDO ACTUALIZAR EN TABLA BANCOS');
      ROLLBACK;
    WHEN OTHERS THEN 
      DBMS_OUTPUT.PUT_LINE('ERROR AL ACTUALIZAR EN TABLA BANCOS');
      ROLLBACK;
END UPDATE_BANCOS;

CREATE OR REPLACE PROCEDURE DELETE_BANCOS(
  _cod_banco IN BANCOS_OBJ.COD_BANCO%TYPE)
  IS
    e_noDelete EXCEPTION
  BEGIN
    DELETE FROM SYS.BANCOS
      WHERE COD_BANCO = _cod_banco;
     
  IF SQL%ROWCOUNT = 0 THEN
    RAISE e_noDelete;
  END IF;
  COMMIT; 

  EXCEPTION 
    WHEN e_noDelete THEN
      DBMS_OUTPUT.PUT_LINE('NO SE HA PODIDO BORRAR EN TABLA BANCOS');
      ROLLBACK;
    WHEN OTHERS THEN 
      DBMS_OUTPUT.PUT_LINE('ERROR AL BORRAR EN TABLA BANCOS');
      ROLLBACK;
END DELETE_BANCOS;

-- SUCURSALES_OBJ

CREATE OR REPLACE PROCEDURE INSERT_SUCURSALES(
  _cod_banco IN SUCURSALES_OBJ.COD_BANCO%TYPE,
  _cod_sucur IN SUCURSALES_OBJ.COD_SUCUR%TYPE,
  _nombre_suc IN SUCURSALES_OBJ.NOMBRE_SUC%TYPE,
  _direc_suc IN SUCURSALES_OBJ.DIREC_SUC%TYPE,
  _loc_suc IN SUCURSALES_OBJ.LOC_SUC%TYPE,
  _prov_suc IN SUCURSALES_OBJ.PROV_SUC%TYPE)
  IS
    e_noInsert EXCEPTION;
  BEGIN 
  INSERT INTO SYS.SUCURSALES (COD_BANCO, COD_SUCUR, NOMBRE_SUC, DIREC_SUC, LOC_SUC, PROV_SUC)  
    VALUES(_cod_banco, _cod_sucur, _nombre_suc, _direc_suc, _loc_suc, _prov_suc);

  IF SQL%ROWCOUNT = 0 THEN
    RAISE e_noInsert;
  END IF;
  COMMIT;
  
  EXCEPTION 
    WHEN e_noInsert THEN
      DBMS_OUTPUT.PUT_LINE('NO SE HA PODIDO INSERTAR EN TABLA SUCURSALES');
      ROLLBACK;
    WHEN OTHERS THEN 
      DBMS_OUTPUT.PUT_LINE('ERROR AL INSERTAR EN TABLA SUCURSALES');
      ROLLBACK;
END INSERT_SUCURSALES;

CREATE OR REPLACE PROCEDURE UPDATE_SUCURSALES(
  _cod_banco IN SUCURSALES_OBJ.COD_BANCO%TYPE,
  _cod_sucur IN SUCURSALES_OBJ.COD_SUCUR%TYPE,
  _nombre_suc IN SUCURSALES_OBJ.NOMBRE_SUC%TYPE,
  _direc_suc IN SUCURSALES_OBJ.DIREC_SUC%TYPE,
  _loc_suc IN SUCURSALES_OBJ.LOC_SUC%TYPE,
  _prov_suc IN SUCURSALES_OBJ.PROV_SUC%TYPE)
  IS
    e_noUpdate EXCEPTION;
  BEGIN 
    UPDATE SYS.SUCURSALES 
      SET NOMBRE_SUC = _nombre_suc, DIREC_SUC = _direc_suc, LOC_SUC = _loc_suc, PROV_SUC = _prov_suc 
      WHERE COD_BANCO = _cod_banco AND COD_SUCUR = _cod_sucur;
    
  IF SQL%ROWCOUNT = 0 THEN
    RAISE e_noUpdate;
  END IF;
  COMMIT;
  
  EXCEPTION 
    WHEN e_noInsert THEN
      DBMS_OUTPUT.PUT_LINE('NO SE HA PODIDO ACTUALIZAR EN TABLA SUCURSALES');
      ROLLBACK;
    WHEN OTHERS THEN 
      DBMS_OUTPUT.PUT_LINE('ERROR AL ACTUALIZAR EN TABLA SUCURSALES');
      ROLLBACK;
END UPDATE_SUCURSALES;

CREATE OR REPLACE PROCEDURE DELETE_SUCURSALES(
  _cod_banco IN SUCURSALES_OBJ.COD_BANCO%TYPE,
  _cod_sucur IN SUCURSALES_OBJ.COD_SUCUR%TYPE)
  IS
    e_noDelete EXCEPTION
  BEGIN
    DELETE FROM SYS.SUCURSALES
      WHERE COD_BANCO = _cod_banco AND COD_SUCUR = _cod_sucur;
     
  IF SQL%ROWCOUNT = 0 THEN
    RAISE e_noDelete;
  END IF;
  COMMIT; 

  EXCEPTION 
    WHEN e_noDelete THEN
      DBMS_OUTPUT.PUT_LINE('NO SE HA PODIDO BORRAR EN TABLA SUCURSALES');
      ROLLBACK;
    WHEN OTHERS THEN 
      DBMS_OUTPUT.PUT_LINE('ERROR AL BORRAR EN TABLA SUCURSALES');
      ROLLBACK;
END DELETE_SUCURSALES;

-- CUENTAS_OBJ

CREATE OR REPLACE PROCEDURE INSERT_CUENTAS(
  _cod_banco IN CUENTAS_OBJ.COD_BANCO%TYPE,
  _cod_sucur IN CUENTAS_OBJ.COD_SUCUR%TYPE,
  _num_cta IN CUENTAS_OBJ.NUM_CTA%TYPE,
  _fecha_alta IN CUENTAS_OBJ.FECHA_ALTA%TYPE,
  _nombre_cta IN CUENTAS_OBJ.NOMBRE_CTA%TYPE,
  _direc_cta IN CUENTAS_OBJ.DIREC_CTA%TYPE,
  _pobla_cta IN CUENTAS_OBJ.POBLA_CTA%TYPE,
  _saldo_debe IN CUENTAS_OBJ.SALDO_DEBE%TYPE,
  _saldo_haber IN CUENTAS_OBJ.SALDO_HABER%TYPE)
  IS
    e_noInsert EXCEPTION;
  BEGIN 
  INSERT INTO SYS.CUENTAS (COD_BANCO, COD_SUCUR, NUM_CTA, FECHA_ALTA, NOMBRE_CTA, DIREC_CTA, POBLA_CTA, SALDO_DEBE, SALDO_HABER)  
    VALUES(_cod_banco, _cod_sucur, _num_cta, _fecha_alta, _nombre_cta, _direc_cta, _pobla_cta, _saldo_debe, _saldo_haber);

  IF SQL%ROWCOUNT = 0 THEN
    RAISE e_noInsert;
  END IF;
  COMMIT;
  
  EXCEPTION 
    WHEN e_noInsert THEN
      DBMS_OUTPUT.PUT_LINE('NO SE HA PODIDO INSERTAR EN TABLA CUENTAS');
      ROLLBACK;
    WHEN OTHERS THEN 
      DBMS_OUTPUT.PUT_LINE('ERROR AL INSERTAR EN TABLA CUENTAS');
      ROLLBACK;
END INSERT_CUENTAS;

CREATE OR REPLACE PROCEDURE UPDATE_CUENTAS(
  _cod_banco IN CUENTAS_OBJ.COD_BANCO%TYPE,
  _cod_sucur IN CUENTAS_OBJ.COD_SUCUR%TYPE,
  _num_cta IN CUENTAS_OBJ.NUM_CTA%TYPE,
  _fecha_alta IN CUENTAS_OBJ.FECHA_ALTA%TYPE,
  _nombre_cta IN CUENTAS_OBJ.NOMBRE_CTA%TYPE,
  _direc_cta IN CUENTAS_OBJ.DIREC_CTA%TYPE,
  _pobla_cta IN CUENTAS_OBJ.POBLA_CTA%TYPE,
  _saldo_debe IN CUENTAS_OBJ.SALDO_DEBE%TYPE,
  _saldo_haber IN CUENTAS_OBJ.SALDO_HABER%TYPE)
  IS
    e_noUpdate EXCEPTION;
  BEGIN 
    UPDATE SYS.CUENTAS 
      SET FECHA_ALTA = _fecha_alta, NOMBRE_CTA = _nombre_cta, DIREC_CTA = _direct_cta, POBLA_CTA = _pobla_cta, SALDO_DEBE = _saldo_debe, SALDO_HABER = _saldo_haber
      WHERE COD_BANCO = _cod_banco AND COD_SUCUR = _cod_sucur AND NUM_CTA = _num_cta;
    
  IF SQL%ROWCOUNT = 0 THEN
    RAISE e_noUpdate;
  END IF;
  COMMIT;
  
  EXCEPTION 
    WHEN e_noInsert THEN
      DBMS_OUTPUT.PUT_LINE('NO SE HA PODIDO ACTUALIZAR EN TABLA CUENTAS');
      ROLLBACK;
    WHEN OTHERS THEN 
      DBMS_OUTPUT.PUT_LINE('ERROR AL ACTUALIZAR EN TABLA CUENTAS');
      ROLLBACK;

END UPDATE_CUENTAS;

CREATE OR REPLACE PROCEDURE DELETE_CUENTAS(
  _cod_banco IN CUENTAS_OBJ.COD_BANCO%TYPE,
  _cod_sucur IN CUENTAS_OBJ.COD_SUCUR%TYPE,
  _num_cta IN CUENTAS_OBJ.NUM_CTA%TYPE)
  IS
    e_noDelete EXCEPTION
  BEGIN
    DELETE FROM SYS.CUENTAS
      WHERE COD_BANCO = _cod_banco AND COD_SUCUR = _cod_sucur AND NUM_CTA = _num_cta;
     
  IF SQL%ROWCOUNT = 0 THEN
    RAISE e_noDelete;
  END IF;
  COMMIT; 

  EXCEPTION 
    WHEN e_noDelete THEN
      DBMS_OUTPUT.PUT_LINE('NO SE HA PODIDO BORRAR EN TABLA CUENTAS');
      ROLLBACK;
    WHEN OTHERS THEN 
      DBMS_OUTPUT.PUT_LINE('ERROR AL BORRAR EN TABLA CUENTAS');
      ROLLBACK;
END DELETE_CUENTAS;

-- MOVIMIENTOS_OBJ

CREATE OR REPLACE PROCEDURE INSERT_MOVIMIENTOS(
  _cod_banco IN MOVIMIENTOS_OBJ.COD_BANCO%TYPE,
  _cod_sucur IN MOVIMIENTOS_OBJ.COD_SUCUR%TYPE,
  _num_cta IN MOVIMIENTOS_OBJ.NUM_CTA%TYPE,
  _fecha_mov IN MOVIMIENTOS_OBJ.FECHA_MOV%TYPE,
  _tipo_mov IN MOVIMIENTOS_OBJ.TIPO_MOV%TYPE,
  _importe IN MOVIMIENTOS_OBJ.IMPORTE%TYPE)
  IS
    e_noInsert EXCEPTION;
  BEGIN 
  INSERT INTO SYS.MOVIMIENTOS (COD_BANCO, COD_SUCUR, NUM_CTA, FECHA_MOV, TIPO_MOV, IMPORTE)  
    VALUES(_cod_banco, _cod_sucur, _num_cta, _fecha_mov, _tipo_mov, _importe);

  IF SQL%ROWCOUNT = 0 THEN
    RAISE e_noInsert;
  END IF;
  COMMIT;
  
  EXCEPTION 
    WHEN e_noInsert THEN
      DBMS_OUTPUT.PUT_LINE('NO SE HA PODIDO INSERTAR EN TABLA MOVIMIENTOS');
      ROLLBACK;
    WHEN OTHERS THEN 
      DBMS_OUTPUT.PUT_LINE('ERROR AL INSERTAR EN TABLA MOVIMIENTOS');
      ROLLBACK;
END INSERT_MOVIMIENTOS;

CREATE OR REPLACE PROCEDURE UPDATE_MOVIMIENTOS(
  _cod_banco IN MOVIMIENTOS_OBJ.COD_BANCO%TYPE,
  _cod_sucur IN MOVIMIENTOS_OBJ.COD_SUCUR%TYPE,
  _num_cta IN MOVIMIENTOS_OBJ.NUM_CTA%TYPE,
  _fecha_mov IN MOVIMIENTOS_OBJ.FECHA_MOV%TYPE,
  _tipo_mov IN MOVIMIENTOS_OBJ.TIPO_MOV%TYPE,
  _importe IN MOVIMIENTOS_OBJ.IMPORTE%TYPE)
  IS
    e_noUpdate EXCEPTION;
  BEGIN 
    UPDATE SYS.MOVIMIENTOS 
      SET TIPO_MOV = _tipo_mov, IMPORTE = _importe  
      WHERE COD_BANCO = _cod_banco AND COD_SUCUR = _cod_sucur AND NUM_CTA = _num_cta AND FECHA_MOV = _fecha_mov;
    
  IF SQL%ROWCOUNT = 0 THEN
    RAISE e_noUpdate;
  END IF;
  COMMIT;
  
  EXCEPTION 
    WHEN e_noInsert THEN
      DBMS_OUTPUT.PUT_LINE('NO SE HA PODIDO ACTUALIZAR EN TABLA MOVIMIENTOS');
      ROLLBACK;
    WHEN OTHERS THEN 
      DBMS_OUTPUT.PUT_LINE('ERROR AL ACTUALIZAR EN TABLA MOVIMIENTOS');
      ROLLBACK;
END UPDATE_MOVIMIENTOS;

CREATE OR REPLACE PROCEDURE DELETE_MOVIMIENTOS(
  _cod_banco IN MOVIMIENTOS_OBJ.COD_BANCO%TYPE,
  _cod_sucur IN MOVIMIENTOS_OBJ.COD_SUCUR%TYPE,
  _num_cta IN MOVIMIENTOS_OBJ.NUM_CTA%TYPE,
  _fecha_mov IN MOVIMIENTOS_OBJ.FECHA_MOV%TYPE)
  IS
    e_noDelete EXCEPTION
  BEGIN
    DELETE FROM SYS.MOVIMIENTOS
      WHERE COD_BANCO = _cod_banco AND COD_SUCUR = _cod_sucur AND NUM_CTA = _num_cta AND FECHA_MOV = _fecha_mov;
     
  IF SQL%ROWCOUNT = 0 THEN
    RAISE e_noDelete;
  END IF;
  COMMIT; 

  EXCEPTION 
    WHEN e_noDelete THEN
      DBMS_OUTPUT.PUT_LINE('NO SE HA PODIDO BORRAR EN TABLA MOVIMIENTOS');
      ROLLBACK;
    WHEN OTHERS THEN 
      DBMS_OUTPUT.PUT_LINE('ERROR AL BORRAR EN TABLA MOVIMIENTOS');
      ROLLBACK;
END DELETE_MOVIMIENTOS;

REM *** CREACION DE TRIGGERS ***

CREATE OR REPLACE TRIGGER